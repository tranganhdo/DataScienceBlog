{
  
    
        "post0": {
            "title": "Determine Pricing",
            "content": "Goal: . Evaluate whether a pricing test running on the site has been successful. | . Summary of Findings: . Should the company sell its software for $39 or $59? The company should sell its software for $59 which will increase revenue per person by ~18 cents. | . | The VP of Product is interested in having a holistic view into user behavior, especially focusing on actionable insights that might increase conversion rate. What are your main findings looking at the data? The greatest improvement in revenue/person in the new pricing model comes from friend referral and google ads. Thus, the company should 1) encourage referrals, for example, giving a coupon for each referral and 2) increase google ads. | The new pricing model brings in most revenue from users of Apple products (iOS and mac) and mobile users, thus, the company should target this customer segment and increase user experience for users on apple products and for mobile users. | . | The VP of Product feels that the test has been running for too long and she should have been able to get statistically significant results in a shorter time. Do you agree with her intuition? After how many days would you have stopped the test? Please, explain why. We need to run the test long enough so we&#39;ll have at least 41 users in each control and treatment group to have an 80% chance of identifying a 20% change in conversion rate. This minimum threshold number of users will vary depending on our choice for the 1) the minimum detectable effect (the minimum change in conversion rate between control group and test group if the alternative hypothesis is true and) 2) power (the probability of rejecting the null hypothesis when the null hypothesis is false (typically set at 80%)). | . | import pandas as pd import pandas_profiling import numpy as np import seaborn as sns import matplotlib.pyplot as plt plt.rc(&quot;font&quot;, size=14) %matplotlib inline . test_results = pd.read_csv(&#39;../test_results.csv&#39;, low_memory=False) user_table = pd.read_csv(&#39;../user_table.csv&#39;, low_memory=False) . test_results.head() . Unnamed: 0 user_id timestamp source device operative_system test price converted . 0 0 | 604839 | 2015-05-08 03:38:34 | ads_facebook | mobile | iOS | 0 | 39.0 | 0 | . 1 1 | 624057 | 2015-05-10 21:08:46 | seo-google | mobile | android | 0 | 39.0 | 0 | . 2 2 | 317970 | 2015-04-04 15:01:23 | ads-bing | mobile | android | 0 | 39.0 | 0 | . 3 3 | 685636 | 2015-05-07 07:26:01 | direct_traffic | mobile | iOS | 1 | 59.0 | 0 | . 4 4 | 820854 | 2015-05-24 11:04:40 | ads_facebook | web | mac | 0 | 39.0 | 0 | . user_table.head() . user_id city country lat long . 0 510335 | Peabody | USA | 42.53 | -70.97 | . 1 89568 | Reno | USA | 39.54 | -119.82 | . 2 434134 | Rialto | USA | 34.11 | -117.39 | . 3 289769 | Carson City | USA | 39.15 | -119.74 | . 4 939586 | Chicago | USA | 41.84 | -87.68 | . data = pd.merge(test_results, user_table) . data.head() . Unnamed: 0 user_id timestamp source device operative_system test price converted city country lat long . 0 0 | 604839 | 2015-05-08 03:38:34 | ads_facebook | mobile | iOS | 0 | 39.0 | 0 | Buffalo | USA | 42.89 | -78.86 | . 1 1 | 624057 | 2015-05-10 21:08:46 | seo-google | mobile | android | 0 | 39.0 | 0 | Lakeville | USA | 44.68 | -93.24 | . 2 2 | 317970 | 2015-04-04 15:01:23 | ads-bing | mobile | android | 0 | 39.0 | 0 | Parma | USA | 41.38 | -81.73 | . 3 3 | 685636 | 2015-05-07 07:26:01 | direct_traffic | mobile | iOS | 1 | 59.0 | 0 | Fayetteville | USA | 35.07 | -78.90 | . 4 4 | 820854 | 2015-05-24 11:04:40 | ads_facebook | web | mac | 0 | 39.0 | 0 | Fishers | USA | 39.95 | -86.02 | . Data Exploratory Analysis . data.profile_report() . . Observations: . Variable &#39;country&#39; has constant value of &#39;USA&#39; and shouldn&#39;t be included in the analysis. | There are 18343 missing cells (&lt; 0.1%). Will need to check the pattern of missing data. | Variable &#39;Price&#39; should have only 2 values: 39 and 59 but has many other values. Need to remove values that are not $39 and $59. | Misspellings in the &#39;operative_system&#39;, for example, iOS vs. IOS, android vs. anroid. Need to fix this. | . duplicateRows = data[data.duplicated()] print(duplicateRows) . Empty DataFrame Columns: [Unnamed_0, user_id, timestamp, source, device, operative_system, test, price, converted, city, country, lat, long] Index: [] . No rows are duplicated . del data[&#39;country&#39;] del data[&#39;Unnamed_0&#39;] . Feature &#39;operative_system&#39; . def fix_os(row): os = row[&quot;operative_system&quot;] if os == &quot;i0S&quot;: os = &quot;iOS&quot; elif os == &quot;anroid&quot;: os = &quot;android&quot; elif os == &quot;apple&quot;: os = &quot;mac&quot; elif os == &quot;wnddows&quot;: os = &quot;windows&quot; return os . data[&quot;operative_system&quot;] = data.apply(fix_os, axis = 1) . data.operative_system.unique() . array([&#39;iOS&#39;, &#39;android&#39;, &#39;mac&#39;, &#39;windows&#39;, nan], dtype=object) . data[&quot;operative_system&quot;].fillna(value = &quot;Other&quot;, inplace = True) . data.operative_system.unique() . array([&#39;iOS&#39;, &#39;android&#39;, &#39;mac&#39;, &#39;windows&#39;, &#39;Other&#39;], dtype=object) . Feature &#39;Price&#39; . data = data[data[&#39;price&#39;] &lt; 60] . data.price.unique() . array([39., 59.]) . data[&quot;source&quot;].fillna(value = &quot;Other&quot;, inplace = True) . data.source.unique() . array([&#39;ads_facebook&#39;, &#39;seo-google&#39;, &#39;ads-bing&#39;, &#39;direct_traffic&#39;, &#39;ads-google&#39;, &#39;friend_referral&#39;, &#39;ads_other&#39;, &#39;ads-yahoo&#39;, &#39;seo-yahoo&#39;, &#39;seo_facebook&#39;, &#39;seo-bing&#39;, &#39;seo-other&#39;, &#39;Other&#39;], dtype=object) . data.head() . user_id timestamp source device operative_system test price converted city lat long . 0 604839 | 2015-05-08 03:38:34 | ads_facebook | mobile | iOS | 0 | 39.0 | 0 | Buffalo | 42.89 | -78.86 | . 1 624057 | 2015-05-10 21:08:46 | seo-google | mobile | android | 0 | 39.0 | 0 | Lakeville | 44.68 | -93.24 | . 2 317970 | 2015-04-04 15:01:23 | ads-bing | mobile | android | 0 | 39.0 | 0 | Parma | 41.38 | -81.73 | . 3 685636 | 2015-05-07 07:26:01 | direct_traffic | mobile | iOS | 1 | 59.0 | 0 | Fayetteville | 35.07 | -78.90 | . 4 820854 | 2015-05-24 11:04:40 | ads_facebook | web | mac | 0 | 39.0 | 0 | Fishers | 39.95 | -86.02 | . 1st question . def get_revenue(group): return (group.converted*group.price).mean() data.groupby(&#39;test&#39;).apply(get_revenue) . test 0 0.771426 1 0.910909 dtype: float64 . def conversion_rate(group): return group.converted.mean() data.groupby(&#39;test&#39;).apply(conversion_rate) . test 0 0.019765 1 0.015439 dtype: float64 . Higher price leads to a lower conversion rate but brings in more revenue per person. . 2nd question . In order to determine what price to charge, we should look at revenue per person instead of conversion rate because although some users may churn, their lost revenue may still be more than made up for by the increased price. . Revenue per person by &#39;source&#39; . data_source = data.groupby([&#39;source&#39;, &#39;test&#39;]).apply(get_revenue).reset_index() data_source.rename(columns={0: &#39;revenue/person&#39;}, inplace=True) . data_source.head() . source test revenue/person . 0 Other | 0 | 0.000000 | . 1 Other | 1 | 0.602041 | . 2 ads-bing | 0 | 0.515857 | . 3 ads-bing | 1 | 0.572654 | . 4 ads-google | 0 | 0.881627 | . sns.set(rc={&#39;figure.figsize&#39;:(7,5)}) sns.barplot(y=&#39;source&#39;, x=&#39;revenue/person&#39;, hue=&#39;test&#39;, data = data_source) plt.title(&#39;Revenue per person by source&#39;) plt.show() . New pricing model brings in more revenue per person from friend referral and google ads . Revenue per person by &#39;operative system&#39; . data_os = data.groupby([&#39;operative_system&#39;, &#39;test&#39;]).apply(get_revenue).reset_index() data_os.rename(columns={0: &#39;revenue/person&#39;}, inplace=True) . data_os.head() . operative_system test revenue/person . 0 Other | 0 | 0.530805 | . 1 Other | 1 | 0.458549 | . 2 android | 0 | 0.625111 | . 3 android | 1 | 0.754149 | . 4 iOS | 0 | 0.914404 | . sns.set(rc={&#39;figure.figsize&#39;:(7,5)}) sns.barplot(y=&#39;operative_system&#39;, x=&#39;revenue/person&#39;, hue=&#39;test&#39;, data= data_os) plt.title(&#39;Revenue per person by operative system&#39;) plt.show() . New pricing model brings in more revenue per person from users of iOS and mac . Revenue per person by &#39;device&#39; . data_device = data.groupby([&#39;device&#39;, &#39;test&#39;]).apply(get_revenue).reset_index() data_device.rename(columns={0: &#39;revenue/person&#39;}, inplace=True) . sns.set(rc={&#39;figure.figsize&#39;:(7,5)}) sns.barplot(y=&#39;device&#39;, x=&#39;revenue/person&#39;, hue=&#39;test&#39;, data= data_device) plt.title(&#39;Revenue per person by operative system&#39;) plt.show() . New pricing model brings in more revenue per person from mobile users . Question 3 . We&#39;ll use power analysis to determine how many users we need to be in each treatment and control group get statistically significant results. . import scipy.stats as scs def min_sample_size(bcr, mde, power=0.8, sig_level=0.05): &quot;&quot;&quot;Returns the minimum sample size to set up a split test Arguments: bcr (float): probability of success for control, sometimes referred to as baseline conversion rate mde (float): minimum change in measurement between control group and test group if alternative hypothesis is true, sometimes referred to as minimum detectable effect power (float): probability of rejecting the null hypothesis when the null hypothesis is false, typically 0.8 sig_level (float): significance level often denoted as alpha, typically 0.05 Returns: min_N: minimum sample size (float) References: Stanford lecture on sample sizes http://statweb.stanford.edu/~susan/courses/s141/hopower.pdf &quot;&quot;&quot; # standard normal distribution to determine z-values standard_norm = scs.norm(0, 1) # find Z_beta from desired power Z_beta = standard_norm.ppf(power) # find Z_alpha Z_alpha = standard_norm.ppf(1-sig_level/2) # average of probabilities from both groups pooled_prob = (bcr + bcr+mde) / 2 min_N = (2 * pooled_prob * (1 - pooled_prob) * (Z_beta + Z_alpha)**2 / mde**2) return min_N . conversion_rate_control = (len(data[(data[&quot;test&quot;] == 0) &amp; (data[&quot;converted&quot;] == 1)]) / len(data[data[&quot;test&quot;] == 0])) print(conversion_rate_control) . 0.019765492220270218 . min_user=min_sample_size(bcr=conversion_rate_control, mde=0.2, power=0.8, sig_level=0.05) print(min_user) . 41.37211972766331 . This means we need to run the test long enough so we&#39;ll have at least 41 users in each control and treatment group to have an 80% chance of identifying a 20% change in conversion rate. .",
            "url": "https://tranganhdo.github.io/DataScienceBlog/2021/06/15/Determine-Pricing.html",
            "relUrl": "/2021/06/15/Determine-Pricing.html",
            "date": " • Jun 15, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Machine Learning - Classification",
            "content": "Goal: . Predict whether a biopsied breast cell is benign (not harmful) or malignant (cancerous) | . Summary of Results: . This is a classification problem. | I dealt with imbalanced classes by implementing SMOTE to up-sample the benign class. | I used logistic regression as the baseline and found an accuracy score of 97.3%. | I then compared logistic regression with alternative classification models including random forest, support vector machines and naive bayes. | Logistic regression, random forest classifier and naive bayes result in similar accuracy scores of 97.3%. The voting classifier slightly outperforms all the individual classifiers with an accuracy score of 97.8%. | . import pandas as pd import pandas_profiling import numpy as np from numpy.core.umath_tests import inner1d from sklearn.linear_model import LogisticRegression from sklearn import datasets from sklearn.preprocessing import StandardScaler from sklearn import preprocessing import matplotlib.pyplot as plt plt.rc(&quot;font&quot;, size=14) from sklearn.ensemble import RandomForestClassifier from sklearn.ensemble import VotingClassifier from sklearn.svm import SVC %matplotlib inline from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split import seaborn as sns sns.set(style=&quot;white&quot;) sns.set(style=&quot;whitegrid&quot;, color_codes=True) from imblearn.over_sampling import SMOTE . /Users/anhdo/anaconda3/envs/insight/lib/python3.7/site-packages/ipykernel_launcher.py:4: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release. after removing the cwd from sys.path. . data = pd.read_csv(&#39;../breast-cancer-wisconsin.csv&#39;, header = None) . Data Exploratory Analysis . data.head() . 0 1 2 3 4 5 6 7 8 9 10 . 0 1000025 | 5 | 1 | 1 | 1 | 2 | 1 | 3 | 1 | 1 | 2 | . 1 1002945 | 5 | 4 | 4 | 5 | 7 | 10 | 3 | 2 | 1 | 2 | . 2 1015425 | 3 | 1 | 1 | 1 | 2 | 2 | 3 | 1 | 1 | 2 | . 3 1016277 | 6 | 8 | 8 | 1 | 3 | 4 | 3 | 7 | 1 | 2 | . 4 1017023 | 4 | 1 | 1 | 3 | 2 | 1 | 3 | 1 | 1 | 2 | . data.columns = [&#39;id&#39;, &#39;clump_thickness&#39;, &#39;cell_size&#39;, &#39;cell_shape&#39;, &#39;adhesion&#39;, &#39;epithelial&#39;, &#39;nuclei&#39;, &#39;chromatin&#39;, &#39;nucleoli&#39;, &#39;mitoses&#39;, &#39;class&#39;] . data.profile_report() . . Observations: . Nuclei is the only categorical feature, all others are numeric. 1 category of nuclei is &#39;?&#39;. . Classification: benign (457 cases = 65.5%), malignant (241 cases = 34.5%) . Cell_shape and cell_size are highly correlated: corr = 0.9 . Create the target variable . data[&#39;y&#39;] = np.where(data[&#39;class&#39;] == 4, 1, 0) #Remove column &#39;class&#39; del data[&#39;class&#39;] . sns.countplot(x = &#39;y&#39;, data = data, palette=&quot;muted&quot;) plt.xlabel(&#39;Malignant&#39;) plt.show() . 2 classes are imbalanced, and the ratio of malignant to benign instances is 34.5% vs. 65.5%. Before we go ahead to balance the classes, Let&#39;s do some more exploration. . data[&#39;nuclei&#39;] = pd.to_numeric(data[&#39;nuclei&#39;], errors=&#39;coerce&#39;) . data.isnull().sum() . id 0 clump_thickness 0 cell_size 0 cell_shape 0 adhesion 0 epithelial 0 nuclei 16 chromatin 0 nucleoli 0 mitoses 0 y 0 dtype: int64 . data = data.dropna() . del data[&#39;id&#39;] . data.columns.values . array([&#39;clump_thickness&#39;, &#39;cell_size&#39;, &#39;cell_shape&#39;, &#39;adhesion&#39;, &#39;epithelial&#39;, &#39;nuclei&#39;, &#39;chromatin&#39;, &#39;nucleoli&#39;, &#39;mitoses&#39;, &#39;y&#39;], dtype=object) . data.groupby(&#39;y&#39;).mean() . clump_thickness cell_size cell_shape adhesion epithelial nuclei chromatin nucleoli mitoses . y . 0 2.963964 | 1.306306 | 1.414414 | 1.346847 | 2.108108 | 1.346847 | 2.083333 | 1.261261 | 1.065315 | . 1 7.188285 | 6.577406 | 6.560669 | 5.585774 | 5.326360 | 7.627615 | 5.974895 | 5.857741 | 2.602510 | . Higher number across all features are associated with a cell being malignant. . Over-sampling using SMOTE . X = data.drop([&#39;y&#39;], axis=1) y = data[[&#39;y&#39;]] . os = SMOTE(random_state =0) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) columns = X_train.columns os_data_X, os_data_y = os.fit_sample(X_train, y_train) os_data_X = pd.DataFrame(data=os_data_X,columns=columns) os_data_y= pd.DataFrame(data=os_data_y,columns=[&#39;y&#39;]) # we can Check the numbers of our data print(&quot;Length of oversampled data is &quot;,len(os_data_X)) print(&quot;Number of benign oversampled data&quot;,len(os_data_y[os_data_y[&#39;y&#39;]==0])) print(&quot;Number of malignant&quot;,len(os_data_y[os_data_y[&#39;y&#39;]==1])) print(&quot;Proportion of benign data in oversampled data is &quot;,len(os_data_y[os_data_y[&#39;y&#39;]==0])/len(os_data_X)) print(&quot;Proportion of malignant data in oversampled data is &quot;,len(os_data_y[os_data_y[&#39;y&#39;]==1])/len(os_data_X)) . Length of oversampled data is 628 Number of benign oversampled data 314 Number of malignant 314 Proportion of benign data in oversampled data is 0.5 Proportion of malignant data in oversampled data is 0.5 . /Users/anhdo/anaconda3/envs/insight/lib/python3.7/site-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . os_data_X.head() . clump_thickness cell_size cell_shape adhesion epithelial nuclei chromatin nucleoli mitoses . 0 8.0 | 6.0 | 4.0 | 3.0 | 5.0 | 9.0 | 3.0 | 1.0 | 1.0 | . 1 4.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 2.0 | 1.0 | 1.0 | . 2 8.0 | 10.0 | 8.0 | 8.0 | 4.0 | 8.0 | 7.0 | 7.0 | 1.0 | . 3 5.0 | 2.0 | 2.0 | 2.0 | 2.0 | 1.0 | 2.0 | 2.0 | 1.0 | . 4 8.0 | 4.0 | 4.0 | 5.0 | 4.0 | 7.0 | 7.0 | 8.0 | 2.0 | . from sklearn.linear_model import LogisticRegression from sklearn import metrics X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) logreg = LogisticRegression() logreg.fit(X_train, y_train) . /Users/anhdo/anaconda3/envs/insight/lib/python3.7/site-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class=&#39;ovr&#39;, n_jobs=1, penalty=&#39;l2&#39;, random_state=None, solver=&#39;liblinear&#39;, tol=0.0001, verbose=0, warm_start=False) . y_pred = logreg.predict(X_test) print(&#39;Accuracy of logistic regression classifier on test set: {:.2f}&#39;.format(logreg.score(X_test, y_test))) . Accuracy of logistic regression classifier on test set: 0.94 . Model Selection . First, I&#39;ll try a logistic regression because it is relatively simple and fast. . Logistic Regression . X=os_data_X y=os_data_y[&#39;y&#39;] . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) . logreg = LogisticRegression() logreg.fit(X_train, y_train) . LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class=&#39;ovr&#39;, n_jobs=1, penalty=&#39;l2&#39;, random_state=None, solver=&#39;liblinear&#39;, tol=0.0001, verbose=0, warm_start=False) . y_pred = logreg.predict(X_test) print(&#39;Accuracy of logistic regression classifier on test set: {:.2f}&#39;.format(logreg.score(X_test, y_test))) . Accuracy of logistic regression classifier on test set: 0.97 . Confusion Matrix . from sklearn.metrics import confusion_matrix confusion_matrix = confusion_matrix(y_test, y_pred) print(confusion_matrix) . [[90 3] [ 2 94]] . import seaborn as sn ax = sns.heatmap(confusion_matrix, annot=True, cmap=plt.cm.Blues, xticklabels=[&#39;benign&#39;,&#39;malignant&#39;], yticklabels=[&#39;benign&#39;,&#39;malignant&#39;]) ax.set_ylabel(&#39;True label&#39;) ax.set_xlabel(&#39;Predicted label&#39;) plt.title(&#39;Logistic Regression Confusion Matrix&#39;) plt.show() . ROC Curve . from sklearn.metrics import roc_auc_score from sklearn.metrics import roc_curve logit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test)) fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1]) plt.figure() plt.plot(fpr, tpr, label=&#39;Logistic Regression (area = %0.2f)&#39; % logit_roc_auc) plt.plot([0, 1], [0, 1],&#39;r--&#39;) plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(&#39;False Positive Rate&#39;) plt.ylabel(&#39;True Positive Rate&#39;) plt.title(&#39;Receiver operating characteristic&#39;) plt.legend(loc=&quot;lower right&quot;) plt.savefig(&#39;Log_ROC&#39;) plt.show() . This looks pretty good. Because this is a classification problem, there are several alternative models: random forest classifier, K neighbors classifier, SVC and Gaussian Naive Bayes. Let&#39;s try an emseble method. . from sklearn.ensemble import RandomForestClassifier from sklearn.ensemble import VotingClassifier from sklearn.linear_model import LogisticRegression from sklearn.neighbors import KNeighborsClassifier from sklearn.svm import SVC from sklearn.naive_bayes import GaussianNB log_clf = LogisticRegression(solver=&quot;liblinear&quot;, random_state=42) rnd_clf = RandomForestClassifier(n_estimators=10, random_state=42) svm_clf = SVC(gamma = &#39;auto&#39;, kernel = &#39;rbf&#39;, probability = True) k_clf = KNeighborsClassifier(n_neighbors = 5, metric = &#39;minkowski&#39;, p = 2) nb_clf = GaussianNB() voting_clf = VotingClassifier( estimators=[(&#39;lr&#39;, log_clf), (&#39;rf&#39;, rnd_clf), (&#39;svc&#39;, svm_clf), (&#39;k&#39;, k_clf), (&#39;nb&#39;, nb_clf)], voting=&#39;soft&#39;) . voting_clf.fit(X_train, y_train) . VotingClassifier(estimators=[(&#39;lr&#39;, LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, intercept_scaling=1, max_iter=100, multi_class=&#39;ovr&#39;, n_jobs=1, penalty=&#39;l2&#39;, random_state=42, solver=&#39;liblinear&#39;, tol=0.0001, verbose=0, warm_start=False)), (&#39;rf&#39;, RandomFor...None, n_jobs=1, n_neighbors=5, p=2, weights=&#39;uniform&#39;)), (&#39;nb&#39;, GaussianNB(priors=None))], flatten_transform=None, n_jobs=1, voting=&#39;soft&#39;, weights=None) . from sklearn.metrics import accuracy_score for clf in (log_clf, rnd_clf, svm_clf, k_clf, nb_clf, voting_clf): clf.fit(X_train, y_train) y_pred = clf.predict(X_test) print(clf.__class__.__name__, accuracy_score(y_test, y_pred)) . LogisticRegression 0.9735449735449735 RandomForestClassifier 0.9735449735449735 SVC 0.9629629629629629 KNeighborsClassifier 0.9682539682539683 GaussianNB 0.9735449735449735 VotingClassifier 0.9788359788359788 . /Users/anhdo/anaconda3/envs/insight/lib/python3.7/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size &gt; 0` to check that an array is not empty. if diff: . Logistic regression, random forest classifier and Gaussian NB result in similar accuracy scores of 97.3%. The voting classifier slightly outperforms all the individual classifiers. Accuracy = 97.8% . 5 Fold Cross-Validation . from sklearn.model_selection import cross_val_score models = [ LogisticRegression(solver=&quot;liblinear&quot;, random_state=42), RandomForestClassifier(n_estimators=10, random_state=42), SVC(gamma = &#39;auto&#39;, kernel = &#39;rbf&#39;), KNeighborsClassifier(n_neighbors = 5, metric = &#39;minkowski&#39;, p = 2), GaussianNB(), ] CV = 5 cv_df = pd.DataFrame(index=range(CV * len(models))) entries = [] for model in models: model_name = model.__class__.__name__ accuracies = cross_val_score(model, X_train, y_train, scoring=&#39;accuracy&#39;, cv=CV) for fold_idx, accuracy in enumerate(accuracies): entries.append((model_name, fold_idx, accuracy)) cv_df = pd.DataFrame(entries, columns=[&#39;model_name&#39;, &#39;fold_idx&#39;, &#39;accuracy&#39;]) sns.boxplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df) sns.stripplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df, size=8, jitter=True, edgecolor=&quot;gray&quot;, linewidth=2) plt.xticks(rotation=45) plt.show() .",
            "url": "https://tranganhdo.github.io/DataScienceBlog/2021/06/14/Machine-Learning-Classification.html",
            "relUrl": "/2021/06/14/Machine-Learning-Classification.html",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tranganhdo.github.io/DataScienceBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tranganhdo.github.io/DataScienceBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tranganhdo.github.io/DataScienceBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tranganhdo.github.io/DataScienceBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}